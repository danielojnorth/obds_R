---
title: 'Template: Integrated exercise using the <i class="fab fa-r-project"></i> tidyverse'
author: "Kevin Rue-Albrecht"
date: "2023-06-09"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(readxl)
```

## Exercise

### Part 1

We provide you with an Excel file that contains gene expression data for the nine most highly variable genes in a pancreas cancer gene expression dataset (<https://portal.gdc.cancer.gov/projects/TCGA-PAAD>), as well as metadata for the individual samples and genes.

Copy the excel file
```{r}
file.copy("/project/shared/r/1_r_data_science/7-tidyverse-workflow/EH2011.xlsx", ".")
```


- Import the gene expression matrix from the Excel file into the R session as a `tibble`.
  Assign it to an object named `exprs_assay`.

```{r}
library("readxl")
excel_sheets("EH2011.xlsx")
exprs_assay <- read_excel("EH2011.xlsx", sheet = "exprs")
exprs_assay
```

- Reshape the gene expression matrix in a tidy format.
  Assign it to a new object `exprs_assay_long`.

```{r}

exprs_assay_long <- exprs_assay %>%  pivot_longer(cols=(!1), names_to = "unique_patient_ID")

exprs_assay_long
```

- Draw a histogram of gene expression levels for each gene in a separate facet.

```{r}
exprs_assay_long %>% ggplot(aes(x = value)) +
  geom_histogram(binwidth = ) +
  facet_wrap(~gene) +
  labs(y="Counts", x = "Gene Expression")


```

## Exercise

### Part 2

- Import the sample metadata from the Excel file into the R session as a `tibble`.
  Assign it to an object named `sample_info`.

```{r}
excel_sheets("EH2011.xlsx")
sample_info <- read_excel("EH2011.xlsx", sheet = "sample_info")
sample_info
```

> Metadata key:
> 
> [NIH AJCC staging system](https://www.cancer.gov/publications/dictionaries/ca> ncer-terms/def/ajcc-staging-system)
> 
> - grade: how abnormal the cancer cells and tissue look under a microscope
> - T: size of the tumor and any spread of cancer into nearby tissue
> - N: spread of cancer to nearby lymph nodes
> - M: metastasis (spread of cancer to other parts of the body)

- Convert the four columns above to the factor type.

```{r}


sample_info <- sample_info %>% mutate(T = factor(T, levels = c("T1","T2","T3","T4")), N = factor(N, levels = c("N0", "N1", "N2", "N3")), M = factor(M, levels = c("M0", "MX")), grade = factor(grade))


sample_info
```

- Combine sample information with gene expression data.
  Assign the output to `exprs_sampleinfo`.

```{r}
exprs_sampleinfo <- full_join(exprs_assay_long, sample_info, by = "unique_patient_ID")

exprs_sampleinfo
```

## Exercise

### Part 3

- Identify the gene with the largest absolute difference in expression between male and female patients.

```{r}
exprs_sampleinfo %>% group_by(gene,sex) %>% 
  summarise("Mean_Expression" = mean(value)) %>% 
  pivot_wider(names_from = "sex", values_from = "Mean_Expression")  %>% 
  mutate("difference" = abs(M - F)) %>% 
  arrange(desc(difference))
  





```

- Visualise the expression of that gene across tumour grades.
  Facet by `sex`.
  Color by `T` score.

```{r}
table_for_ggplot <- exprs_sampleinfo %>% filter(gene == "XIST")

table_for_ggplot
```

```{r}
ggplot(table_for_ggplot, aes(x = grade, y = value, fill = T), na.rm = TRUE) +
  geom_boxplot(colour = "black", linewidth = 0.2, na.rm = TRUE) +
  geom_point(position = "jitter") +
  facet_wrap(~sex)


```

- Draw a heat map of all nine genes.
  Remove labels as well as ticks for the x-axis.
  Remove the panel grid and background.

```{r}
ggplot(exprs_sampleinfo, aes(x = unique_patient_ID, y = gene, fill = value) ) +
  geom_tile() +
  labs(x = NULL, y = "Genes") +
  theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), panel.grid = element_blank()) +
  scale_fill_gradient2(low = "red", mid = "black", high = "green", midpoint = 10)
 
  




```

- Repeat the heat map, grouping samples by sex.

```{r}
# Copy the code chunk above and tweak the aes(...) contents.
ggplot(exprs_sampleinfo, 
       aes(x = unique_patient_ID, y = gene, fill = value, group = sex) 
       ) +
  geom_tile(colour = "black", linewidth = 0.01) +
  labs(x = NULL, y = "Genes") +
  theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), panel.grid = element_blank())+
  scale_fill_gradientn(colours = hcl.colors(20, palette = "viridis", rev = TRUE)) +
  facet_wrap(~sex, scales = "free_x") +
  guides(fill = guide_colourbar(barwidth = 0.8, label = TRUE, title = "Gene Expression",
                                theme=theme(legend.ticks = element_blank())))






```
